name: Unit Tests

on: [push]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      max-parallel: 4
      matrix:
        python-version: ["3.10"]
        os: [ubuntu-latest]

    steps:
      - name: Checkout ${{ matrix.python-version }}
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Set up GCP Service Account Credentials
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.TEST_GCP_SERVICE_KEY }} # Store your GCP service account key as a GitHub secret

      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl

      - name: Install Minikube
        run: |
          curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
          chmod +x minikube
          sudo mv minikube /usr/local/bin/

      - name: Set up Minikube
        env:
          GOOGLE_APPLICATION_CREDENTIALS: /tmp/google_application_credentials.json
        run: |
          echo "${{ secrets.TEST_GCP_SERVICE_KEY }}" | base64 --decode > /tmp/google_application_credentials.json
          bash bin/test-env-up.sh

      - name: Debug minikube
        run: |
          echo "docker ps"
          docker ps
          echo "docker network ls"
          docker network ls
          echo "docker network inspect bridge"
          docker network inspect bridge
          echo "curl host.minikube.internal:5080"
          curl host.minikube.internal:5080
          echo "curl ftp://host.minikube.internal:5021"
          curl ftp://host.minikube.internal:5021

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install pigz -y
          python -m pip install --upgrade pip

          cd ..
          # TODO: Change back!!
          # git clone https://github.com/The-Academic-Observatory/observatory-platform.git
          git clone -b feature/astro-refactor https://github.com/The-Academic-Observatory/observatory-platform.git
          pip install -e ./observatory-platform[tests] --constraint https://raw.githubusercontent.com/apache/airflow/constraints-2.7.3/constraints-no-providers-${{ matrix.python-version }}.txt

          cd academic-observatory-workflows
          pip install -e ./academic-observatory-workflows[test] --constraint https://raw.githubusercontent.com/apache/airflow/constraints-2.7.3/constraints-no-providers-${{ matrix.python-version }}.txt

          cd ..
          curl -LO https://github.com/peak/s5cmd/releases/download/v2.1.0/s5cmd_2.1.0_linux_amd64.deb
          sudo dpkg -i s5cmd_2.1.0_linux_amd64.deb

          pip freeze
          airflow db init

      - name: Check licenses
        run: |
          # stop the build if there are licensing issues
          python bin/extract_deps.py
          liccheck --sfile strategy.ini --rfile .liccheck_requirements.txt --level CAUTIOUS --reporting liccheck-output.txt --no-deps

      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Run unit tests with coverage
        env:
          TEST_GCP_DATA_LOCATION: ${{ secrets.TEST_GCP_DATA_LOCATION }}
          TEST_GCP_BUCKET_NAME: ${{ secrets.TEST_GCP_BUCKET_NAME }}
          TEST_GCP_PROJECT_ID: ${{ secrets.TEST_GCP_PROJECT_ID }}
          TEST_GCP_SERVICE_KEY: ${{ secrets.TEST_GCP_SERVICE_KEY }}
          GOOGLE_APPLICATION_CREDENTIALS: /tmp/google_application_credentials.json
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
          AIRFLOW__CORE__LOAD_EXAMPLES: false
        run: |
          echo "${{ secrets.TEST_GCP_SERVICE_KEY }}" | base64 --decode > /tmp/google_application_credentials.json
          coverage run -m unittest -v academic_observatory_workflows.pubmed_telescope.tests.test_telescope.TestPubMedTelescope.test_telescope
          coverage xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1
        with:
          file: ./coverage.xml
          fail_ci_if_error: false
