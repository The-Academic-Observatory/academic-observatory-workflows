name: "Terraform Production"

on:
  release:
    types:
      - published

defaults:
  run:
    working-directory: ./academic_observatory_workflows_api/terraform

env:
  SERVICE: ao-api
  TF_WORKSPACE: ao-production
  TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}
  TF_BACKEND_ORGANIZATION: ${{ secrets.TF_BACKEND_ORGANIZATION }}
  PROJECT_ID: ${{ secrets.PRODUCTION_GCP_PROJECT_ID }}
  GCP_CREDENTIALS: ${{ secrets.PRODUCTION_GCP_SERVICE_KEY }}
  REGION: us-west1

jobs:
  update_image:
    name: "Update Cloud Run Image"
    runs-on: ${{ matrix.os }}
    strategy:
      max-parallel: 4
      matrix:
        python-version: [ 3.8 ]
        os: [ ubuntu-20.04 ]
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@v0.2.0
        with:
          project_id: ${{ env.PROJECT_ID }}
          service_account_key: ${{ env.GCP_CREDENTIALS }}
          export_default_credentials: true  # Set to true to authenticate the Cloud Run action

      - name: Authorize Docker push
        run: gcloud auth configure-docker

      - name: Build and Push Container
        run: |-
          docker build -t gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE }}:${{ github.event.release.tag_name }} ../
          docker push gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE }}:${{ github.event.release.tag_name }}

  terraform:
    name: "Terraform"
    needs: update_image
    runs-on: ${{ matrix.os }}
    strategy:
      max-parallel: 4
      matrix:
        python-version: [ 3.8 ]
        os: [ ubuntu-20.04 ]
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip

          cd ..
          pip install -e .

      - name: Render openapi and image build files
        run: |
          python ../server/openapi_renderer.py "../server/openapi.yaml.jinja2" "./openapi.yaml.tpl"
          echo ${{ github.event.release.tag_name }} > ./image_build.txt

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          # terraform_version: 0.13.0:
          cli_config_credentials_token: ${{ env.TF_API_TOKEN }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt -diff -check

      - name: Terraform Init
        id: init
        run: terraform init
          -backend-config="organization="${{ env.TF_BACKEND_ORGANIZATION }}""

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color
        continue-on-error: true

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1