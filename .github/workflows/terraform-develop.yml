name: "Terraform Develop"

on:
  push:
#    branches:
#      - develop
#      - main
  pull_request:
    branches:
      - develop
      - main
  release:
    types:
      - published

env:
  SERVICE: ao-api
#  TF_WORKSPACE: ao-develop
  TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}
  TF_BACKEND_ORGANIZATION: ${{ secrets.TF_BACKEND_ORGANIZATION }}
#  PROJECT_ID: ${{ secrets.DEVELOP_GCP_PROJECT_ID }}
#  GCP_CREDENTIALS: ${{ secrets.DEVELOP_GCP_SERVICE_KEY }}

jobs:
  set_variables:
    name: "Set environment variables"
    runs-on: ubuntu-latest
    steps:
      - name: Set environment variables
        id: vars
        run: >
          if [ ${{ github.ref }} == 'refs/heads/develop' ]; then
            echo "TF_WORKSPACE=ao-develop" >> $GITHUB_ENV;
            echo "PROJECT_ID=${{ secrets.DEVELOP_GCP_PROJECT_ID }}" >> $GITHUB_ENV;
            echo "GCP_CREDENTIALS=${{ secrets.DEVELOP_GCP_SERVICE_KEY }}" >> $GITHUB_ENV;
          elif [ ${{ github.ref }} == 'refs/heads/INF-73_data_API' && ${{ github.events }} == 'push' ]; then
            echo "::set-output name=TF_WORKSPACE::ao-develop" >> $GITHUB_ENV;
            echo "::set-output name=PROJECT_ID::${{ secrets.DEVELOP_GCP_PROJECT_ID }}" >> $GITHUB_ENV;
            echo "::set-output name=GCP_CREDENTIALS::${{ secrets.DEVELOP_GCP_SERVICE_KEY }}" >> $GITHUB_ENV;
          elif [ ${{ github.ref }} == 'refs/heads/main' && ${{ github.events }} == 'push' ]; then
            echo "TF_WORKSPACE=ao-staging" >> $GITHUB_ENV;
            echo "PROJECT_ID=${{ secrets.STAGING_GCP_PROJECT_ID }}" >> $GITHUB_ENV;
            echo "GCP_CREDENTIALS=${{ secrets.STAGING_GCP_SERVICE_KEY }}" >> $GITHUB_ENV;
          else
            echo "TF_WORKSPACE=ao-production" >> $GITHUB_ENV;
            echo "PROJECT_ID=${{ secrets.PRODUCTION_GCP_PROJECT_ID }}" >> $GITHUB_ENV;
            echo "GCP_CREDENTIALS=${{ secrets.PRODUCTION_GCP_SERVICE_KEY }}" >> $GITHUB_ENV;
          fi

      - name: Test vars
        run: |
          echo "vars"
          echo "${{ steps.vars.outputs.TF_WORKSPACE }}"
          echo "${{ steps.vars.outputs.PROJECT_ID }}"
          echo "${{ steps.vars.outputs.GCP_CREDENTIALS }}"

    outputs:
      tf_workspace: ${{ steps.vars.outputs.TF_WORKSPACE }}
      project_id: ${{ steps.vars.outputs.PROJECT_ID }}
      gcp_credentials: ${{ steps.vars.outputs.GCP_CREDENTIALS }}


  build-and-push-image:
    name: "Build and push image"
    needs: set_variables
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read

    steps:
      - name: Test vars
        run: |
          echo "vars"
          echo "${{ needs.set_variables.outputs.tf_workspace }}"
          echo "${{ needs.set_variables.outputs.project_id }}"
          echo "${{ needs.set_variables.outputs.gcp_credentials }}"

      - name: Checkout project
        uses: actions/checkout@v2

      - name: Log in to the Container registry
        uses: docker/login-action@v1
        with:
          registry: gcr.io
          username: _json_key
          password: ${{ env.GCP_CREDENTIALS }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: ./academic_observatory_workflows_api/
          push: true
          tags: ${{ steps.meta.outputs.tags }}

  terraform:
    needs: build-and-push-image
    name: "Terraform"
    defaults:
      run:
        working-directory: ./academic_observatory_workflows_api/terraform
    runs-on: ${{ matrix.os }}
    strategy:
      max-parallel: 4
      matrix:
        python-version: [ 3.8 ]
        os: [ ubuntu-20.04 ]
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          cd ..
          pip install -e .

      - name: Render openapi file
        run: |
          python ../server/openapi_renderer.py "../server/openapi.yaml.jinja2" "./openapi.yaml.tpl"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          # terraform_version: 0.13.0:
          cli_config_credentials_token: ${{ env.TF_API_TOKEN }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt -diff -check

      - name: Terraform Init
        id: init
        run: terraform init
          -backend-config="organization="${{ env.TF_BACKEND_ORGANIZATION }}""

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color
        continue-on-error: true

      - name: Find Comment
        if: github.event_name == 'pull_request'
        uses: peter-evans/find-comment@v1
        id: fc
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: 'github-actions[bot]'
          body-includes: Terraform Workflow

      - name: Create or update comment
        if: github.event_name == 'pull_request'
        uses: peter-evans/create-or-update-comment@v1
        with:
          comment-id: ${{ steps.fc.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            Terraform Workflow
            #### Terraform Format and Style üñå`${{ steps.fmt.outcome }}`
            #### Terraform Initialization ‚öôÔ∏è`${{ steps.init.outcome }}`
            #### Terraform Validation ü§ñ`${{ steps.validate.outcome }}`
            #### Terraform Plan üìñ`${{ steps.plan.outcome }}`
            <details><summary>Show Plan</summary>

            ```terraform
            ${{ steps.plan.outputs.stdout }}
            ```
            </details>

            *Pusher: @${{ github.actor }}, Action: `${{ github.event_name }}`*
          edit-mode: replace

      - name: Terraform Apply
        if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
        run: terraform apply -auto-approve

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
