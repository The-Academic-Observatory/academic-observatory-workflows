name: "Terraform Develop"

on:
  push:
#    branches:
#      - develop
  pull_request:
    branches:
      - develop

defaults:
  run:
    working-directory: ./academic_observatory_workflows_api/terraform

env:
  SERVICE: ao-api
  TF_WORKSPACE: ao-develop
  TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}
  TF_BACKEND_ORGANIZATION: ${{ secrets.TF_BACKEND_ORGANIZATION }}
  PROJECT_ID: ${{ secrets.DEVELOP_GCP_PROJECT_ID }}
  GCP_CREDENTIALS: ${{ secrets.DEVELOP_GCP_SERVICE_KEY }}
  REGION: us-west1

jobs:
  build-and-push-image:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read

    steps:
      - name: Checkout project
        uses: actions/checkout@v2

      - name: Log in to the Container registry
        uses: docker/login-action@v1
        with:
          registry: gcr.io
          username: _json_key
          password: ${{ env.GCP_CREDENTIALS }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}

#  update_image:
#    name: "Update Cloud Run Image"
#    if: github.event_name == 'push'
#    runs-on: ${{ matrix.os }}
#    strategy:
#      max-parallel: 4
#      matrix:
#        python-version: [ 3.8 ]
#        os: [ ubuntu-20.04 ]
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v2
#
#      - name: Setup Cloud SDK
#        uses: google-github-actions/setup-gcloud@v0.2.0
#        with:
#          project_id: ${{ env.PROJECT_ID }}
#          service_account_key: ${{ env.GCP_CREDENTIALS }}
#          export_default_credentials: true  # Set to true to authenticate the Cloud Run action
#
#      - name: Authorize Docker push
#        run: gcloud auth configure-docker
#
#      - name: Build and Push Container
#        run: |-
#          docker build -t gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE }}:${{ steps.image.outputs.tag }} ../
#          docker push gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE }}:${{ steps.image.outputs.tag }}
#
#      - name: Delete images without a tag
#        run: >
#          gcloud container images list-tags gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE }}
#          --filter='-tags:*' --format="get(digest)" |
#          xargs -I {} gcloud container images delete gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE }}@{}
#          --quiet

  terraform:
    name: "Terraform"
    needs: update_image
    runs-on: ${{ matrix.os }}
    strategy:
      max-parallel: 4
      matrix:
        python-version: [ 3.8 ]
        os: [ ubuntu-20.04 ]
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip

          cd ..
          pip install -e .

      - name: Render openapi file
        run: |
          python ../server/openapi_renderer.py "../server/openapi.yaml.jinja2" "./openapi.yaml.tpl"
#          echo ${{ needs.update_image.outputs.image_tag }} > ./image_build.txt

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          # terraform_version: 0.13.0:
          cli_config_credentials_token: ${{ env.TF_API_TOKEN }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt -diff -check

      - name: Terraform Init
        id: init
        run: terraform init
          -backend-config="organization="${{ env.TF_BACKEND_ORGANIZATION }}""

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color
        continue-on-error: true

      - name: Find Comment
        if: github.event_name == 'pull_request'
        uses: peter-evans/find-comment@v1
        id: fc
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: 'github-actions[bot]'
          body-includes: Terraform Workflow

      - name: Create or update comment
        if: github.event_name == 'pull_request'
        uses: peter-evans/create-or-update-comment@v1
        with:
          comment-id: ${{ steps.fc.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            Terraform Workflow
            #### Terraform Format and Style 🖌`${{ steps.fmt.outcome }}`
            #### Terraform Initialization ⚙️`${{ steps.init.outcome }}`
            #### Terraform Validation 🤖`${{ steps.validate.outcome }}`
            #### Terraform Plan 📖`${{ steps.plan.outcome }}`
            <details><summary>Show Plan</summary>

            ```terraform
            ${{ steps.plan.outputs.stdout }}
            ```
            </details>

            *Pusher: @${{ github.actor }}, Action: `${{ github.event_name }}`*
          edit-mode: replace

      - name: Terraform Apply
        if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
        run: terraform apply -auto-approve

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
