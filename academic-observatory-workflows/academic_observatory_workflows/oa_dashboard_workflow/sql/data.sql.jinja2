CREATE TEMP FUNCTION calcPercent(numerator FLOAT64, denominator FLOAT64)
RETURNS FLOAT64
AS (
  IFNULL(SAFE_DIVIDE(numerator * 100 , denominator), 0)
);

CREATE TEMP FUNCTION removeRorPrefix(str STRING)
RETURNS STRING
AS (
  REGEXP_REPLACE(str, r'^https?://ror\.org/', '')
);

CREATE TEMP FUNCTION
  REMOVE_DIACRITICS(input STRING)
  RETURNS STRING
  LANGUAGE js AS """
    return input.normalize('NFD').replace(/[\u0300-\u036f]/g, '');
""";

-- All numbers are FLOAT64 otherwise BigQuery won't export them as numbers in JSON
WITH years as (
  SELECT
    agg.id as id,
    CAST(agg.time_period AS FLOAT64) AS year,
    DATE(agg.time_period, 12, 31) AS date,
    STRUCT(
      CAST(agg.citations.openalex.total_citations AS FLOAT64) AS n_citations,
      CAST(agg.total_outputs AS FLOAT64) AS n_outputs,

      -- N Outputs
      CAST(agg.coki.oa.coki.open.total AS FLOAT64) AS n_outputs_open,
      CAST(agg.coki.oa.coki.publisher.total AS FLOAT64) AS n_outputs_publisher_open,
      CAST(agg.coki.oa.coki.publisher_only.total AS FLOAT64) AS n_outputs_publisher_open_only,
      CAST(agg.coki.oa.coki.both.total AS FLOAT64) AS n_outputs_both,
      CAST(agg.coki.oa.coki.other_platform.total AS FLOAT64) AS n_outputs_other_platform_open,
      CAST(agg.coki.oa.coki.other_platform_only.total AS FLOAT64) AS n_outputs_other_platform_open_only,
      CAST(agg.coki.oa.coki.closed.total AS FLOAT64) AS n_outputs_closed,

      CAST(agg.coki.oa.coki.publisher_categories.oa_journal.total AS FLOAT64) AS n_outputs_oa_journal,
      CAST(agg.coki.oa.coki.publisher_categories.hybrid.total AS FLOAT64) AS n_outputs_hybrid,
      CAST(agg.coki.oa.coki.publisher_categories.no_guarantees.total AS FLOAT64) AS n_outputs_no_guarantees,

      CAST(agg.coki.oa.coki.other_platform_categories.preprint.total AS FLOAT64) AS n_outputs_preprint,
      CAST(agg.coki.oa.coki.other_platform_categories.domain.total AS FLOAT64) AS n_outputs_domain,
      CAST(agg.coki.oa.coki.other_platform_categories.institution.total AS FLOAT64) AS n_outputs_institution,
      CAST(agg.coki.oa.coki.other_platform_categories.public.total AS FLOAT64) AS n_outputs_public,
      CAST(agg.coki.oa.coki.other_platform_categories.aggregator.total + agg.coki.oa.coki.other_platform_categories.other_internet.total + agg.coki.oa.coki.other_platform_categories.unknown.total AS FLOAT64) AS n_outputs_other_internet,

      CAST(agg.coki.oa.color.black.total_outputs AS FLOAT64) as n_outputs_black,

      -- Percentages
      -- Percentages from aggregate table are rounded so not usable
      calcPercent(agg.coki.oa.coki.open.total, agg.total_outputs) AS p_outputs_open,
      calcPercent(agg.coki.oa.coki.publisher.total, agg.total_outputs) AS p_outputs_publisher_open,
      calcPercent(agg.coki.oa.coki.publisher_only.total, agg.total_outputs) AS p_outputs_publisher_open_only,
      calcPercent(agg.coki.oa.coki.both.total, agg.total_outputs) AS p_outputs_both,
      calcPercent(agg.coki.oa.coki.other_platform.total, agg.total_outputs) AS p_outputs_other_platform_open,
      calcPercent(agg.coki.oa.coki.other_platform_only.total, agg.total_outputs) AS p_outputs_other_platform_open_only,
      calcPercent(agg.coki.oa.coki.closed.total, agg.total_outputs) AS p_outputs_closed,

      calcPercent(agg.coki.oa.coki.publisher_categories.oa_journal.total, agg.coki.oa.coki.publisher.total) AS p_outputs_oa_journal,
      calcPercent(agg.coki.oa.coki.publisher_categories.hybrid.total, agg.coki.oa.coki.publisher.total) AS p_outputs_hybrid,
      calcPercent(agg.coki.oa.coki.publisher_categories.no_guarantees.total, agg.coki.oa.coki.publisher.total) AS p_outputs_no_guarantees,

      calcPercent(agg.coki.oa.coki.other_platform_categories.preprint.total, agg.coki.oa.coki.other_platform.total) AS p_outputs_preprint,
      calcPercent(agg.coki.oa.coki.other_platform_categories.domain.total, agg.coki.oa.coki.other_platform.total) AS p_outputs_domain,
      calcPercent(agg.coki.oa.coki.other_platform_categories.institution.total, agg.coki.oa.coki.other_platform.total) AS p_outputs_institution,
      calcPercent(agg.coki.oa.coki.other_platform_categories.public.total, agg.coki.oa.coki.other_platform.total) AS p_outputs_public,
      calcPercent(agg.coki.oa.coki.other_platform_categories.aggregator.total + agg.coki.oa.coki.other_platform_categories.other_internet.total + agg.coki.oa.coki.other_platform_categories.unknown.total, agg.coki.oa.coki.other_platform.total) AS p_outputs_other_internet,

      calcPercent(agg.coki.oa.color.black.total_outputs, agg.total_outputs) AS p_outputs_black
  ) as stats
  FROM `{{ agg_table_id }}` as agg
  WHERE agg.time_period >= {{ start_year }} AND agg.time_period <= {{ end_year }}
  ORDER BY year DESC
),

aggregate_data as (
  SELECT
    id,
    STRUCT(
      -- output counts
      SUM(stats.n_citations) as n_citations,
      SUM(stats.n_outputs) as n_outputs,
      SUM(stats.n_outputs_open) as n_outputs_open,
      SUM(stats.n_outputs_publisher_open) as n_outputs_publisher_open,
      SUM(stats.n_outputs_publisher_open_only) as n_outputs_publisher_open_only,
      SUM(stats.n_outputs_both) as n_outputs_both,
      SUM(stats.n_outputs_other_platform_open) as n_outputs_other_platform_open,
      SUM(stats.n_outputs_other_platform_open_only) as n_outputs_other_platform_open_only,
      SUM(stats.n_outputs_closed) as n_outputs_closed,
      SUM(stats.n_outputs_oa_journal) as n_outputs_oa_journal,
      SUM(stats.n_outputs_hybrid) as n_outputs_hybrid,
      SUM(stats.n_outputs_no_guarantees) as n_outputs_no_guarantees,
      SUM(stats.n_outputs_preprint) as n_outputs_preprint,
      SUM(stats.n_outputs_domain) as n_outputs_domain,
      SUM(stats.n_outputs_institution) as n_outputs_institution,
      SUM(stats.n_outputs_public) as n_outputs_public,
      SUM(stats.n_outputs_other_internet) as n_outputs_other_internet,
      SUM(stats.n_outputs_black) as n_outputs_black,

      -- percentages
      calcPercent(SUM(stats.n_outputs_open), SUM(stats.n_outputs)) as p_outputs_open,
      calcPercent(SUM(stats.n_outputs_publisher_open), SUM(stats.n_outputs)) as p_outputs_publisher_open,
      calcPercent(SUM(stats.n_outputs_publisher_open_only), SUM(stats.n_outputs)) as p_outputs_publisher_open_only,
      calcPercent(SUM(stats.n_outputs_both), SUM(stats.n_outputs)) as p_outputs_both,
      calcPercent(SUM(stats.n_outputs_other_platform_open), SUM(stats.n_outputs)) as p_outputs_other_platform_open,
      calcPercent(SUM(stats.n_outputs_other_platform_open_only), SUM(stats.n_outputs)) as p_outputs_other_platform_open_only,
      calcPercent(SUM(stats.n_outputs_closed), SUM(stats.n_outputs)) as p_outputs_closed,
      calcPercent(SUM(stats.n_outputs_oa_journal), SUM(stats.n_outputs_publisher_open)) as p_outputs_oa_journal,
      calcPercent(SUM(stats.n_outputs_hybrid), SUM(stats.n_outputs_publisher_open)) as p_outputs_hybrid,
      calcPercent(SUM(stats.n_outputs_no_guarantees), SUM(stats.n_outputs_publisher_open)) as p_outputs_no_guarantees,
      calcPercent(SUM(stats.n_outputs_preprint), SUM(stats.n_outputs_other_platform_open)) as p_outputs_preprint,
      calcPercent(SUM(stats.n_outputs_domain), SUM(stats.n_outputs_other_platform_open)) as p_outputs_domain,
      calcPercent(SUM(stats.n_outputs_institution), SUM(stats.n_outputs_other_platform_open)) as p_outputs_institution,
      calcPercent(SUM(stats.n_outputs_public), SUM(stats.n_outputs_other_platform_open)) as p_outputs_public,
      calcPercent(SUM(stats.n_outputs_other_internet), SUM(stats.n_outputs_other_platform_open)) as p_outputs_other_internet,
      calcPercent(SUM(stats.n_outputs_black), SUM(stats.n_outputs)) as p_outputs_black
    ) as stats
  FROM years
  GROUP BY id
),

years_agg as (
  SELECT
    id,
    ARRAY_AGG(STRUCT(year, date, stats) ORDER BY year ASC) as years
  FROM years
  GROUP BY id
),

agg_repos AS (
  SELECT
    agg.id as agg_id,
    repo.id,
    SUM(repo.total_outputs) as total_outputs,
    repo.category,
    repo.home_repo
  FROM `{{ agg_table_id }}` AS agg, UNNEST(agg.coki.repositories) AS repo
  WHERE agg.time_period >= {{ start_year }} AND agg.time_period <= {{ end_year }}
  GROUP BY agg.id, repo.id, repo.category, repo.home_repo
),

ranked_repos AS (
  SELECT
    *,
    ROW_NUMBER() OVER (PARTITION BY agg_id ORDER BY home_repo DESC, total_outputs DESC, LOWER(REMOVE_DIACRITICS(id)) ASC) AS repo_rank
  FROM agg_repos
),

repositories AS (
  SELECT
    agg_id as id,
    ARRAY_AGG(
      STRUCT(
        id,
        CAST(total_outputs AS FLOAT64) as total_outputs,
        CASE
          WHEN category IN ('Aggregator', 'Unknown') THEN 'Other Internet'
          ELSE category
        END AS category,
        home_repo
      )
      ORDER BY total_outputs DESC, LOWER(REMOVE_DIACRITICS(id)) ASC
    ) AS repositories
  FROM ranked_repos
  WHERE repo_rank <= 200 OR home_repo
  GROUP BY agg_id
)