{#
  # Copyright 2020 Curtin University
  #
  # Licensed under the Apache License, Version 2.0 (the "License");
  # you may not use this file except in compliance with the License.
  # You may obtain a copy of the License at
  #
  #   http://www.apache.org/licenses/LICENSE-2.0
  #
  # Unless required by applicable law or agreed to in writing, software
  # distributed under the License is distributed on an "AS IS" BASIS,
  # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  # See the License for the specific language governing permissions and
  # limitations under the License.

  # Author: Richard Hosking, James Diprose

  This query allows affiliation IDs recorded in MAG to be modified when problems are discovered
#}
WITH affiliations_processed AS (
  SELECT
    affiliation.AffiliationId,
    affiliation.DisplayName,
    IFNULL(override.grid_id, affiliation.GridId) AS GridId
  FROM `{{ mag.project_id }}.{{ mag.dataset_id }}.Affiliations{{ mag.release_date.strftime('%Y%m%d') }}` AS affiliation
  LEFT JOIN `{{ mag.project_id }}.{{ settings.dataset_id }}.mag_affiliation_override` AS override ON override.AffiliationId = affiliation.AffiliationId
),

{# This query preprocesses the Fields of Study to simply the later queries #}
fields_of_study AS (
  SELECT
    fields.*,
    ARRAY(
      SELECT AS STRUCT
        extended.AttributeType  AS AttributeType,
        extended.AttributeValue AS AttributeValue
      FROM `{{ mag.project_id }}.{{ mag.dataset_id }}.FieldOfStudyExtendedAttributes{{ mag.release_date.strftime('%Y%m%d') }}` AS extended
      WHERE extended.FieldOfStudyId = fields.FieldOfStudyId
    ) AS extended
  FROM `{{ mag.project_id }}.{{ mag.dataset_id }}.FieldsOfStudy{{ mag.release_date.strftime('%Y%m%d') }}` AS fields
)

{# Main Query that takes the range of normalised MAG tables and creates single, DOI indexed, table that is easier to join with Crossref #}
SELECT
  papers.* EXCEPT (journalId, ConferenceSeriesId, ConferenceInstanceId, CreatedDate) REPLACE ( UPPER(TRIM(Doi)) AS Doi),
  REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(REGEXP_REPLACE(JSON_EXTRACT(IndexedAbstract, '$.InvertedIndex'), "[0-9]+", ""), ":", ""), ",", " "), '"', ""), "{", ""), "}", ""), "[", ""), "]", "") AS abstract,
  fields.fields,
  mesh.mesh,
  authors.authors,
  STRUCT(
    journal.JournalId,
    journal.DisplayName,
    journal.Issn,
    journal.Publisher
  ) AS journal,
  STRUCT(
    conferenceInstance.ConferenceInstanceId,
    conferenceInstance.NormalizedName,
    conferenceInstance.DisplayName,
    conferenceInstance.Location,
    conferenceInstance.OfficialUrl,
    conferenceInstance.StartDate,
    conferenceInstance.EndDate,
    conferenceInstance.PaperCount,
    conferenceInstance.Latitude,
    conferenceInstance.Longitude
  ) AS conferenceInstance,
  STRUCT(
    conferenceSeries.ConferenceSeriesId,
    conferenceSeries.NormalizedName,
    conferenceSeries.DisplayName
  ) AS conferenceSeries,
  extended.attributes,
  resources.resources,
  urls.urls,
  ARRAY((SELECT GridId FROM authors.authors WHERE GridId IS NOT NULL GROUP BY GridID)) AS grids
FROM (
  SELECT UPPER(TRIM(doi)), ARRAY_AGG(Paperid ORDER BY CitationCount DESC)[offset(0)] AS PaperId
  FROM `{{ mag.project_id }}.{{ mag.dataset_id }}.Papers{{ mag.release_date.strftime('%Y%m%d') }}` AS papers
  WHERE (papers.FamilyId IS NULL OR papers.FamilyId = papers.PaperId) AND papers.doi IS NOT NULL
  GROUP BY UPPER(TRIM(doi))
) AS dois

-- Papers, Abstracts, Journal, ConferenceInstance and ConferenceSeries
LEFT JOIN `{{ mag.project_id }}.{{ mag.dataset_id }}.Papers{{ mag.release_date.strftime('%Y%m%d') }}`                       AS papers             ON papers.PaperId = dois.PaperId
LEFT JOIN `{{ mag.project_id }}.{{ mag.dataset_id }}.PaperAbstractsInvertedIndex{{ mag.release_date.strftime('%Y%m%d') }}`  AS abstracts          ON abstracts.PaperId = papers.PaperId
LEFT JOIN `{{ mag.project_id }}.{{ mag.dataset_id }}.Journals{{ mag.release_date.strftime('%Y%m%d') }}`                     AS journal            ON journal.JournalId = papers.JournalId
LEFT JOIN `{{ mag.project_id }}.{{ mag.dataset_id }}.ConferenceInstances{{ mag.release_date.strftime('%Y%m%d') }}`          AS conferenceInstance ON conferenceInstance.ConferenceInstanceId = papers.ConferenceInstanceId
LEFT JOIN `{{ mag.project_id }}.{{ mag.dataset_id }}.ConferenceSeries{{ mag.release_date.strftime('%Y%m%d') }}`             AS conferenceSeries   ON conferenceSeries.ConferenceSeriesId = papers.ConferenceSeriesId

-- Fields of Study
LEFT JOIN (
  SELECT
    papers.PaperId,
    STRUCT(
      ARRAY_AGG(IF(fields.Level = 0, STRUCT(fields.DisplayName,fields.FieldOfStudyId,fields.Rank,fields.MainType,paperFields.Score,extended), NULL) IGNORE NULLS ORDER BY paperFields.Score DESC) AS level_0,
      ARRAY_AGG(IF(fields.Level = 1, STRUCT(fields.DisplayName,fields.FieldOfStudyId,fields.Rank,fields.MainType,paperFields.Score,extended), NULL) IGNORE NULLS ORDER BY paperFields.Score DESC) AS level_1,
      ARRAY_AGG(IF(fields.Level = 2, STRUCT(fields.DisplayName,fields.FieldOfStudyId,fields.Rank,fields.MainType,paperFields.Score,extended), NULL) IGNORE NULLS ORDER BY paperFields.Score DESC) AS level_2,
      ARRAY_AGG(IF(fields.Level = 3, STRUCT(fields.DisplayName,fields.FieldOfStudyId,fields.Rank,fields.MainType,paperFields.Score,extended), NULL) IGNORE NULLS ORDER BY paperFields.Score DESC) AS level_3,
      ARRAY_AGG(IF(fields.Level = 4, STRUCT(fields.DisplayName,fields.FieldOfStudyId,fields.Rank,fields.MainType,paperFields.Score,extended), NULL) IGNORE NULLS ORDER BY paperFields.Score DESC) AS level_4,
      ARRAY_AGG(IF(fields.Level = 5, STRUCT(fields.DisplayName,fields.FieldOfStudyId,fields.Rank,fields.MainType,paperFields.Score,extended), NULL) IGNORE NULLS ORDER BY paperFields.Score DESC) AS level_5
    ) AS fields
  FROM `{{ mag.project_id }}.{{ mag.dataset_id }}.Papers{{ mag.release_date.strftime('%Y%m%d') }}` AS papers
  LEFT JOIN `{{ mag.project_id }}.{{ mag.dataset_id }}.PaperFieldsOfStudy{{ mag.release_date.strftime('%Y%m%d') }}` AS paperFields ON papers.PaperId = paperFields.PaperId
  LEFT JOIN fields_of_study AS fields ON fields.FieldOfStudyId = paperFields.FieldOfStudyId
  WHERE papers.Doi IS NOT NULL
  GROUP BY papers.PaperId
) AS fields ON fields.PaperId = papers.PaperId

-- Authors
LEFT JOIN (
  SELECT
    papers.PaperId,
    ARRAY_AGG(STRUCT(
      paperAuthorAffiliations.AuthorSequenceNumber,
      paperAuthorAffiliations.AuthorID,
      paperAuthorAffiliations.OriginalAuthor,
      paperAuthorAffiliations.AffiliationId,
      paperAuthorAffiliations.OriginalAffiliation,
      affiliation.GridId,
      affiliation.DisplayName
    ) IGNORE NULLS ORDER BY paperAuthorAffiliations.AuthorSequenceNumber ASC) AS authors
  FROM `{{ mag.project_id }}.{{ mag.dataset_id }}.Papers{{ mag.release_date.strftime('%Y%m%d') }}` AS papers
  LEFT JOIN `{{ mag.project_id }}.{{ mag.dataset_id }}.PaperAuthorAffiliations{{ mag.release_date.strftime('%Y%m%d') }}` AS paperAuthorAffiliations ON paperAuthorAffiliations.PaperId = papers.PaperId
  LEFT JOIN affiliations_processed AS affiliation ON affiliation.AffiliationId = paperAuthorAffiliations.AffiliationId
  GROUP BY papers.PaperId
) AS authors ON authors.PaperId = papers.PaperId

-- Extended Attributes
LEFT JOIN (
  SELECT
    PaperId,
    ARRAY_AGG(STRUCT( AttributeType, AttributeValue)) AS attributes
  FROM `{{ mag.project_id }}.{{ mag.dataset_id }}.PaperExtendedAttributes{{ mag.release_date.strftime('%Y%m%d') }}`
  GROUP BY PaperId
) AS extended ON extended.PaperId = papers.PaperId

-- Resources
LEFT JOIN (
  SELECT
    PaperId,
    ARRAY_AGG(STRUCT( ResourceType , ResourceUrl )) AS resources
  FROM `{{ mag.project_id }}.{{ mag.dataset_id }}.PaperResources{{ mag.release_date.strftime('%Y%m%d') }}`
  GROUP BY PaperId
) AS resources ON resources.PaperId = papers.PaperId

-- URLs
LEFT JOIN (
  SELECT
    PaperId,
    ARRAY_AGG(STRUCT( SourceType , SourceUrl, LanguageCode )) AS urls
  FROM `{{ mag.project_id }}.{{ mag.dataset_id }}.PaperUrls{{ mag.release_date.strftime('%Y%m%d') }}`
  GROUP BY PaperId
) AS urls ON urls.PaperId = papers.PaperId

-- PaperMESH
LEFT JOIN (
  SELECT
    PaperId,
    ARRAY_AGG(STRUCT( DescriptorUI, DescriptorName, QualifierUI, QualifierName, IsMajorTopic )) AS mesh
  FROM `{{ mag.project_id }}.{{ mag.dataset_id }}.PaperMeSH{{ mag.release_date.strftime('%Y%m%d') }}`
  GROUP BY PaperId
) AS mesh ON mesh.PaperId = papers.PaperId
